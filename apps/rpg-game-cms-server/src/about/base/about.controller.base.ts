/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AboutService } from "../about.service";
import { AboutCreateInput } from "./AboutCreateInput";
import { About } from "./About";
import { AboutFindManyArgs } from "./AboutFindManyArgs";
import { AboutWhereUniqueInput } from "./AboutWhereUniqueInput";
import { AboutUpdateInput } from "./AboutUpdateInput";
import { ContactFormCreateInput } from "../ContactFormCreateInput";

export class AboutControllerBase {
  constructor(protected readonly service: AboutService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: About })
  async createAbout(@common.Body() data: AboutCreateInput): Promise<About> {
    return await this.service.createAbout({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,
        title: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [About] })
  @ApiNestedQuery(AboutFindManyArgs)
  async abouts(@common.Req() request: Request): Promise<About[]> {
    const args = plainToClass(AboutFindManyArgs, request.query);
    return this.service.abouts({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,
        title: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: About })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async about(
    @common.Param() params: AboutWhereUniqueInput
  ): Promise<About | null> {
    const result = await this.service.about({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,
        title: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: About })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAbout(
    @common.Param() params: AboutWhereUniqueInput,
    @common.Body() data: AboutUpdateInput
  ): Promise<About | null> {
    try {
      return await this.service.updateAbout({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          content: true,
          title: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: About })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAbout(
    @common.Param() params: AboutWhereUniqueInput
  ): Promise<About | null> {
    try {
      return await this.service.deleteAbout({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          content: true,
          title: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/contact")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async SubmitContactForm(
    @common.Body()
    body: ContactFormCreateInput
  ): Promise<string> {
    return this.service.SubmitContactForm(body);
  }
}
