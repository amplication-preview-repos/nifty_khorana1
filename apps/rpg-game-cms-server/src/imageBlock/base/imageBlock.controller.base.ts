/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ImageBlockService } from "../imageBlock.service";
import { ImageBlockCreateInput } from "./ImageBlockCreateInput";
import { ImageBlock } from "./ImageBlock";
import { ImageBlockFindManyArgs } from "./ImageBlockFindManyArgs";
import { ImageBlockWhereUniqueInput } from "./ImageBlockWhereUniqueInput";
import { ImageBlockUpdateInput } from "./ImageBlockUpdateInput";

export class ImageBlockControllerBase {
  constructor(protected readonly service: ImageBlockService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ImageBlock })
  async createImageBlock(
    @common.Body() data: ImageBlockCreateInput
  ): Promise<ImageBlock> {
    return await this.service.createImageBlock({
      data: {
        ...data,

        page: data.page
          ? {
              connect: data.page,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        url: true,
        description: true,

        page: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ImageBlock] })
  @ApiNestedQuery(ImageBlockFindManyArgs)
  async imageBlocks(@common.Req() request: Request): Promise<ImageBlock[]> {
    const args = plainToClass(ImageBlockFindManyArgs, request.query);
    return this.service.imageBlocks({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        url: true,
        description: true,

        page: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ImageBlock })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async imageBlock(
    @common.Param() params: ImageBlockWhereUniqueInput
  ): Promise<ImageBlock | null> {
    const result = await this.service.imageBlock({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        url: true,
        description: true,

        page: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ImageBlock })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateImageBlock(
    @common.Param() params: ImageBlockWhereUniqueInput,
    @common.Body() data: ImageBlockUpdateInput
  ): Promise<ImageBlock | null> {
    try {
      return await this.service.updateImageBlock({
        where: params,
        data: {
          ...data,

          page: data.page
            ? {
                connect: data.page,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          url: true,
          description: true,

          page: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ImageBlock })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteImageBlock(
    @common.Param() params: ImageBlockWhereUniqueInput
  ): Promise<ImageBlock | null> {
    try {
      return await this.service.deleteImageBlock({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          url: true,
          description: true,

          page: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
