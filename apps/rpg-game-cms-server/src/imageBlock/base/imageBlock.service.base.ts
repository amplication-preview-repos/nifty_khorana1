/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ImageBlock as PrismaImageBlock,
  Page as PrismaPage,
} from "@prisma/client";

export class ImageBlockServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ImageBlockCountArgs, "select">
  ): Promise<number> {
    return this.prisma.imageBlock.count(args);
  }

  async imageBlocks(
    args: Prisma.ImageBlockFindManyArgs
  ): Promise<PrismaImageBlock[]> {
    return this.prisma.imageBlock.findMany(args);
  }
  async imageBlock(
    args: Prisma.ImageBlockFindUniqueArgs
  ): Promise<PrismaImageBlock | null> {
    return this.prisma.imageBlock.findUnique(args);
  }
  async createImageBlock(
    args: Prisma.ImageBlockCreateArgs
  ): Promise<PrismaImageBlock> {
    return this.prisma.imageBlock.create(args);
  }
  async updateImageBlock(
    args: Prisma.ImageBlockUpdateArgs
  ): Promise<PrismaImageBlock> {
    return this.prisma.imageBlock.update(args);
  }
  async deleteImageBlock(
    args: Prisma.ImageBlockDeleteArgs
  ): Promise<PrismaImageBlock> {
    return this.prisma.imageBlock.delete(args);
  }

  async getPage(parentId: string): Promise<PrismaPage | null> {
    return this.prisma.imageBlock
      .findUnique({
        where: { id: parentId },
      })
      .page();
  }
}
