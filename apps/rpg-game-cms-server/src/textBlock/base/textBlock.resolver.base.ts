/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TextBlock } from "./TextBlock";
import { TextBlockCountArgs } from "./TextBlockCountArgs";
import { TextBlockFindManyArgs } from "./TextBlockFindManyArgs";
import { TextBlockFindUniqueArgs } from "./TextBlockFindUniqueArgs";
import { CreateTextBlockArgs } from "./CreateTextBlockArgs";
import { UpdateTextBlockArgs } from "./UpdateTextBlockArgs";
import { DeleteTextBlockArgs } from "./DeleteTextBlockArgs";
import { Page } from "../../page/base/Page";
import { TextBlockService } from "../textBlock.service";
@graphql.Resolver(() => TextBlock)
export class TextBlockResolverBase {
  constructor(protected readonly service: TextBlockService) {}

  async _textBlocksMeta(
    @graphql.Args() args: TextBlockCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TextBlock])
  async textBlocks(
    @graphql.Args() args: TextBlockFindManyArgs
  ): Promise<TextBlock[]> {
    return this.service.textBlocks(args);
  }

  @graphql.Query(() => TextBlock, { nullable: true })
  async textBlock(
    @graphql.Args() args: TextBlockFindUniqueArgs
  ): Promise<TextBlock | null> {
    const result = await this.service.textBlock(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TextBlock)
  async createTextBlock(
    @graphql.Args() args: CreateTextBlockArgs
  ): Promise<TextBlock> {
    return await this.service.createTextBlock({
      ...args,
      data: {
        ...args.data,

        page: args.data.page
          ? {
              connect: args.data.page,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TextBlock)
  async updateTextBlock(
    @graphql.Args() args: UpdateTextBlockArgs
  ): Promise<TextBlock | null> {
    try {
      return await this.service.updateTextBlock({
        ...args,
        data: {
          ...args.data,

          page: args.data.page
            ? {
                connect: args.data.page,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TextBlock)
  async deleteTextBlock(
    @graphql.Args() args: DeleteTextBlockArgs
  ): Promise<TextBlock | null> {
    try {
      return await this.service.deleteTextBlock(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Page, {
    nullable: true,
    name: "page",
  })
  async getPage(@graphql.Parent() parent: TextBlock): Promise<Page | null> {
    const result = await this.service.getPage(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
