/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TextBlockService } from "../textBlock.service";
import { TextBlockCreateInput } from "./TextBlockCreateInput";
import { TextBlock } from "./TextBlock";
import { TextBlockFindManyArgs } from "./TextBlockFindManyArgs";
import { TextBlockWhereUniqueInput } from "./TextBlockWhereUniqueInput";
import { TextBlockUpdateInput } from "./TextBlockUpdateInput";

export class TextBlockControllerBase {
  constructor(protected readonly service: TextBlockService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TextBlock })
  async createTextBlock(
    @common.Body() data: TextBlockCreateInput
  ): Promise<TextBlock> {
    return await this.service.createTextBlock({
      data: {
        ...data,

        page: data.page
          ? {
              connect: data.page,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,

        page: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TextBlock] })
  @ApiNestedQuery(TextBlockFindManyArgs)
  async textBlocks(@common.Req() request: Request): Promise<TextBlock[]> {
    const args = plainToClass(TextBlockFindManyArgs, request.query);
    return this.service.textBlocks({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,

        page: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TextBlock })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async textBlock(
    @common.Param() params: TextBlockWhereUniqueInput
  ): Promise<TextBlock | null> {
    const result = await this.service.textBlock({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,

        page: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TextBlock })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTextBlock(
    @common.Param() params: TextBlockWhereUniqueInput,
    @common.Body() data: TextBlockUpdateInput
  ): Promise<TextBlock | null> {
    try {
      return await this.service.updateTextBlock({
        where: params,
        data: {
          ...data,

          page: data.page
            ? {
                connect: data.page,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          content: true,

          page: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TextBlock })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTextBlock(
    @common.Param() params: TextBlockWhereUniqueInput
  ): Promise<TextBlock | null> {
    try {
      return await this.service.deleteTextBlock({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          content: true,

          page: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
