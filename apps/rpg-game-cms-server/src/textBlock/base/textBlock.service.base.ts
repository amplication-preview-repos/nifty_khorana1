/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TextBlock as PrismaTextBlock,
  Page as PrismaPage,
} from "@prisma/client";

export class TextBlockServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TextBlockCountArgs, "select">
  ): Promise<number> {
    return this.prisma.textBlock.count(args);
  }

  async textBlocks(
    args: Prisma.TextBlockFindManyArgs
  ): Promise<PrismaTextBlock[]> {
    return this.prisma.textBlock.findMany(args);
  }
  async textBlock(
    args: Prisma.TextBlockFindUniqueArgs
  ): Promise<PrismaTextBlock | null> {
    return this.prisma.textBlock.findUnique(args);
  }
  async createTextBlock(
    args: Prisma.TextBlockCreateArgs
  ): Promise<PrismaTextBlock> {
    return this.prisma.textBlock.create(args);
  }
  async updateTextBlock(
    args: Prisma.TextBlockUpdateArgs
  ): Promise<PrismaTextBlock> {
    return this.prisma.textBlock.update(args);
  }
  async deleteTextBlock(
    args: Prisma.TextBlockDeleteArgs
  ): Promise<PrismaTextBlock> {
    return this.prisma.textBlock.delete(args);
  }

  async getPage(parentId: string): Promise<PrismaPage | null> {
    return this.prisma.textBlock
      .findUnique({
        where: { id: parentId },
      })
      .page();
  }
}
