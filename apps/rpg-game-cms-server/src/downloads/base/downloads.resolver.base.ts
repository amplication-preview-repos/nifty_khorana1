/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Downloads } from "./Downloads";
import { DownloadsCountArgs } from "./DownloadsCountArgs";
import { DownloadsFindManyArgs } from "./DownloadsFindManyArgs";
import { DownloadsFindUniqueArgs } from "./DownloadsFindUniqueArgs";
import { CreateDownloadsArgs } from "./CreateDownloadsArgs";
import { UpdateDownloadsArgs } from "./UpdateDownloadsArgs";
import { DeleteDownloadsArgs } from "./DeleteDownloadsArgs";
import { DownloadsService } from "../downloads.service";
@graphql.Resolver(() => Downloads)
export class DownloadsResolverBase {
  constructor(protected readonly service: DownloadsService) {}

  async _downloadsItemsMeta(
    @graphql.Args() args: DownloadsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Downloads])
  async downloadsItems(
    @graphql.Args() args: DownloadsFindManyArgs
  ): Promise<Downloads[]> {
    return this.service.downloadsItems(args);
  }

  @graphql.Query(() => Downloads, { nullable: true })
  async downloads(
    @graphql.Args() args: DownloadsFindUniqueArgs
  ): Promise<Downloads | null> {
    const result = await this.service.downloads(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Downloads)
  async createDownloads(
    @graphql.Args() args: CreateDownloadsArgs
  ): Promise<Downloads> {
    return await this.service.createDownloads({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Downloads)
  async updateDownloads(
    @graphql.Args() args: UpdateDownloadsArgs
  ): Promise<Downloads | null> {
    try {
      return await this.service.updateDownloads({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Downloads)
  async deleteDownloads(
    @graphql.Args() args: DeleteDownloadsArgs
  ): Promise<Downloads | null> {
    try {
      return await this.service.deleteDownloads(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
