/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Downloads as PrismaDownloads } from "@prisma/client";

export class DownloadsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DownloadsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.downloads.count(args);
  }

  async downloadsItems(
    args: Prisma.DownloadsFindManyArgs
  ): Promise<PrismaDownloads[]> {
    return this.prisma.downloads.findMany(args);
  }
  async downloads(
    args: Prisma.DownloadsFindUniqueArgs
  ): Promise<PrismaDownloads | null> {
    return this.prisma.downloads.findUnique(args);
  }
  async createDownloads(
    args: Prisma.DownloadsCreateArgs
  ): Promise<PrismaDownloads> {
    return this.prisma.downloads.create(args);
  }
  async updateDownloads(
    args: Prisma.DownloadsUpdateArgs
  ): Promise<PrismaDownloads> {
    return this.prisma.downloads.update(args);
  }
  async deleteDownloads(
    args: Prisma.DownloadsDeleteArgs
  ): Promise<PrismaDownloads> {
    return this.prisma.downloads.delete(args);
  }
}
