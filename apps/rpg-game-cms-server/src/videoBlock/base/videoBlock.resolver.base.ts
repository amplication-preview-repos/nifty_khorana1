/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { VideoBlock } from "./VideoBlock";
import { VideoBlockCountArgs } from "./VideoBlockCountArgs";
import { VideoBlockFindManyArgs } from "./VideoBlockFindManyArgs";
import { VideoBlockFindUniqueArgs } from "./VideoBlockFindUniqueArgs";
import { CreateVideoBlockArgs } from "./CreateVideoBlockArgs";
import { UpdateVideoBlockArgs } from "./UpdateVideoBlockArgs";
import { DeleteVideoBlockArgs } from "./DeleteVideoBlockArgs";
import { Page } from "../../page/base/Page";
import { VideoBlockService } from "../videoBlock.service";
@graphql.Resolver(() => VideoBlock)
export class VideoBlockResolverBase {
  constructor(protected readonly service: VideoBlockService) {}

  async _videoBlocksMeta(
    @graphql.Args() args: VideoBlockCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [VideoBlock])
  async videoBlocks(
    @graphql.Args() args: VideoBlockFindManyArgs
  ): Promise<VideoBlock[]> {
    return this.service.videoBlocks(args);
  }

  @graphql.Query(() => VideoBlock, { nullable: true })
  async videoBlock(
    @graphql.Args() args: VideoBlockFindUniqueArgs
  ): Promise<VideoBlock | null> {
    const result = await this.service.videoBlock(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VideoBlock)
  async createVideoBlock(
    @graphql.Args() args: CreateVideoBlockArgs
  ): Promise<VideoBlock> {
    return await this.service.createVideoBlock({
      ...args,
      data: {
        ...args.data,

        page: args.data.page
          ? {
              connect: args.data.page,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => VideoBlock)
  async updateVideoBlock(
    @graphql.Args() args: UpdateVideoBlockArgs
  ): Promise<VideoBlock | null> {
    try {
      return await this.service.updateVideoBlock({
        ...args,
        data: {
          ...args.data,

          page: args.data.page
            ? {
                connect: args.data.page,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VideoBlock)
  async deleteVideoBlock(
    @graphql.Args() args: DeleteVideoBlockArgs
  ): Promise<VideoBlock | null> {
    try {
      return await this.service.deleteVideoBlock(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Page, {
    nullable: true,
    name: "page",
  })
  async getPage(@graphql.Parent() parent: VideoBlock): Promise<Page | null> {
    const result = await this.service.getPage(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
