/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VideoBlockService } from "../videoBlock.service";
import { VideoBlockCreateInput } from "./VideoBlockCreateInput";
import { VideoBlock } from "./VideoBlock";
import { VideoBlockFindManyArgs } from "./VideoBlockFindManyArgs";
import { VideoBlockWhereUniqueInput } from "./VideoBlockWhereUniqueInput";
import { VideoBlockUpdateInput } from "./VideoBlockUpdateInput";

export class VideoBlockControllerBase {
  constructor(protected readonly service: VideoBlockService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VideoBlock })
  async createVideoBlock(
    @common.Body() data: VideoBlockCreateInput
  ): Promise<VideoBlock> {
    return await this.service.createVideoBlock({
      data: {
        ...data,

        page: data.page
          ? {
              connect: data.page,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,

        page: {
          select: {
            id: true,
          },
        },

        url: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [VideoBlock] })
  @ApiNestedQuery(VideoBlockFindManyArgs)
  async videoBlocks(@common.Req() request: Request): Promise<VideoBlock[]> {
    const args = plainToClass(VideoBlockFindManyArgs, request.query);
    return this.service.videoBlocks({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,

        page: {
          select: {
            id: true,
          },
        },

        url: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VideoBlock })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async videoBlock(
    @common.Param() params: VideoBlockWhereUniqueInput
  ): Promise<VideoBlock | null> {
    const result = await this.service.videoBlock({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,

        page: {
          select: {
            id: true,
          },
        },

        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VideoBlock })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVideoBlock(
    @common.Param() params: VideoBlockWhereUniqueInput,
    @common.Body() data: VideoBlockUpdateInput
  ): Promise<VideoBlock | null> {
    try {
      return await this.service.updateVideoBlock({
        where: params,
        data: {
          ...data,

          page: data.page
            ? {
                connect: data.page,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,

          page: {
            select: {
              id: true,
            },
          },

          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VideoBlock })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVideoBlock(
    @common.Param() params: VideoBlockWhereUniqueInput
  ): Promise<VideoBlock | null> {
    try {
      return await this.service.deleteVideoBlock({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,

          page: {
            select: {
              id: true,
            },
          },

          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
