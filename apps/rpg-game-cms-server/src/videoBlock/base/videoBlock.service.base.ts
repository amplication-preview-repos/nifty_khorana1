/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  VideoBlock as PrismaVideoBlock,
  Page as PrismaPage,
} from "@prisma/client";

export class VideoBlockServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VideoBlockCountArgs, "select">
  ): Promise<number> {
    return this.prisma.videoBlock.count(args);
  }

  async videoBlocks(
    args: Prisma.VideoBlockFindManyArgs
  ): Promise<PrismaVideoBlock[]> {
    return this.prisma.videoBlock.findMany(args);
  }
  async videoBlock(
    args: Prisma.VideoBlockFindUniqueArgs
  ): Promise<PrismaVideoBlock | null> {
    return this.prisma.videoBlock.findUnique(args);
  }
  async createVideoBlock(
    args: Prisma.VideoBlockCreateArgs
  ): Promise<PrismaVideoBlock> {
    return this.prisma.videoBlock.create(args);
  }
  async updateVideoBlock(
    args: Prisma.VideoBlockUpdateArgs
  ): Promise<PrismaVideoBlock> {
    return this.prisma.videoBlock.update(args);
  }
  async deleteVideoBlock(
    args: Prisma.VideoBlockDeleteArgs
  ): Promise<PrismaVideoBlock> {
    return this.prisma.videoBlock.delete(args);
  }

  async getPage(parentId: string): Promise<PrismaPage | null> {
    return this.prisma.videoBlock
      .findUnique({
        where: { id: parentId },
      })
      .page();
  }
}
