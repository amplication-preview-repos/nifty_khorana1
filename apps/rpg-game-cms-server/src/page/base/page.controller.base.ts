/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PageService } from "../page.service";
import { PageCreateInput } from "./PageCreateInput";
import { Page } from "./Page";
import { PageFindManyArgs } from "./PageFindManyArgs";
import { PageWhereUniqueInput } from "./PageWhereUniqueInput";
import { PageUpdateInput } from "./PageUpdateInput";
import { VideoBlockFindManyArgs } from "../../videoBlock/base/VideoBlockFindManyArgs";
import { VideoBlock } from "../../videoBlock/base/VideoBlock";
import { VideoBlockWhereUniqueInput } from "../../videoBlock/base/VideoBlockWhereUniqueInput";
import { ImageBlockFindManyArgs } from "../../imageBlock/base/ImageBlockFindManyArgs";
import { ImageBlock } from "../../imageBlock/base/ImageBlock";
import { ImageBlockWhereUniqueInput } from "../../imageBlock/base/ImageBlockWhereUniqueInput";
import { TextBlockFindManyArgs } from "../../textBlock/base/TextBlockFindManyArgs";
import { TextBlock } from "../../textBlock/base/TextBlock";
import { TextBlockWhereUniqueInput } from "../../textBlock/base/TextBlockWhereUniqueInput";

export class PageControllerBase {
  constructor(protected readonly service: PageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Page })
  async createPage(@common.Body() data: PageCreateInput): Promise<Page> {
    return await this.service.createPage({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Page] })
  @ApiNestedQuery(PageFindManyArgs)
  async pages(@common.Req() request: Request): Promise<Page[]> {
    const args = plainToClass(PageFindManyArgs, request.query);
    return this.service.pages({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Page })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async page(
    @common.Param() params: PageWhereUniqueInput
  ): Promise<Page | null> {
    const result = await this.service.page({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Page })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePage(
    @common.Param() params: PageWhereUniqueInput,
    @common.Body() data: PageUpdateInput
  ): Promise<Page | null> {
    try {
      return await this.service.updatePage({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Page })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePage(
    @common.Param() params: PageWhereUniqueInput
  ): Promise<Page | null> {
    try {
      return await this.service.deletePage({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/videoBlocks")
  @ApiNestedQuery(VideoBlockFindManyArgs)
  async findVideoBlocks(
    @common.Req() request: Request,
    @common.Param() params: PageWhereUniqueInput
  ): Promise<VideoBlock[]> {
    const query = plainToClass(VideoBlockFindManyArgs, request.query);
    const results = await this.service.findVideoBlocks(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,

        page: {
          select: {
            id: true,
          },
        },

        url: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/videoBlocks")
  async connectVideoBlocks(
    @common.Param() params: PageWhereUniqueInput,
    @common.Body() body: VideoBlockWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      videoBlocks: {
        connect: body,
      },
    };
    await this.service.updatePage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/videoBlocks")
  async updateVideoBlocks(
    @common.Param() params: PageWhereUniqueInput,
    @common.Body() body: VideoBlockWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      videoBlocks: {
        set: body,
      },
    };
    await this.service.updatePage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/videoBlocks")
  async disconnectVideoBlocks(
    @common.Param() params: PageWhereUniqueInput,
    @common.Body() body: VideoBlockWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      videoBlocks: {
        disconnect: body,
      },
    };
    await this.service.updatePage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/imageBlocks")
  @ApiNestedQuery(ImageBlockFindManyArgs)
  async findImageBlocks(
    @common.Req() request: Request,
    @common.Param() params: PageWhereUniqueInput
  ): Promise<ImageBlock[]> {
    const query = plainToClass(ImageBlockFindManyArgs, request.query);
    const results = await this.service.findImageBlocks(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        url: true,
        description: true,

        page: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/imageBlocks")
  async connectImageBlocks(
    @common.Param() params: PageWhereUniqueInput,
    @common.Body() body: ImageBlockWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      imageBlocks: {
        connect: body,
      },
    };
    await this.service.updatePage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/imageBlocks")
  async updateImageBlocks(
    @common.Param() params: PageWhereUniqueInput,
    @common.Body() body: ImageBlockWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      imageBlocks: {
        set: body,
      },
    };
    await this.service.updatePage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/imageBlocks")
  async disconnectImageBlocks(
    @common.Param() params: PageWhereUniqueInput,
    @common.Body() body: ImageBlockWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      imageBlocks: {
        disconnect: body,
      },
    };
    await this.service.updatePage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/textBlocks")
  @ApiNestedQuery(TextBlockFindManyArgs)
  async findTextBlocks(
    @common.Req() request: Request,
    @common.Param() params: PageWhereUniqueInput
  ): Promise<TextBlock[]> {
    const query = plainToClass(TextBlockFindManyArgs, request.query);
    const results = await this.service.findTextBlocks(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,

        page: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/textBlocks")
  async connectTextBlocks(
    @common.Param() params: PageWhereUniqueInput,
    @common.Body() body: TextBlockWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      textBlocks: {
        connect: body,
      },
    };
    await this.service.updatePage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/textBlocks")
  async updateTextBlocks(
    @common.Param() params: PageWhereUniqueInput,
    @common.Body() body: TextBlockWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      textBlocks: {
        set: body,
      },
    };
    await this.service.updatePage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/textBlocks")
  async disconnectTextBlocks(
    @common.Param() params: PageWhereUniqueInput,
    @common.Body() body: TextBlockWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      textBlocks: {
        disconnect: body,
      },
    };
    await this.service.updatePage({
      where: params,
      data,
      select: { id: true },
    });
  }
}
