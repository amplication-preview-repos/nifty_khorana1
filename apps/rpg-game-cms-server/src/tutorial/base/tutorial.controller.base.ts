/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TutorialService } from "../tutorial.service";
import { TutorialCreateInput } from "./TutorialCreateInput";
import { Tutorial } from "./Tutorial";
import { TutorialFindManyArgs } from "./TutorialFindManyArgs";
import { TutorialWhereUniqueInput } from "./TutorialWhereUniqueInput";
import { TutorialUpdateInput } from "./TutorialUpdateInput";

export class TutorialControllerBase {
  constructor(protected readonly service: TutorialService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Tutorial })
  async createTutorial(
    @common.Body() data: TutorialCreateInput
  ): Promise<Tutorial> {
    return await this.service.createTutorial({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,
        publishedAt: true,
        difficultyLevel: true,
        title: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Tutorial] })
  @ApiNestedQuery(TutorialFindManyArgs)
  async tutorials(@common.Req() request: Request): Promise<Tutorial[]> {
    const args = plainToClass(TutorialFindManyArgs, request.query);
    return this.service.tutorials({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,
        publishedAt: true,
        difficultyLevel: true,
        title: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Tutorial })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tutorial(
    @common.Param() params: TutorialWhereUniqueInput
  ): Promise<Tutorial | null> {
    const result = await this.service.tutorial({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,
        publishedAt: true,
        difficultyLevel: true,
        title: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Tutorial })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTutorial(
    @common.Param() params: TutorialWhereUniqueInput,
    @common.Body() data: TutorialUpdateInput
  ): Promise<Tutorial | null> {
    try {
      return await this.service.updateTutorial({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          content: true,
          publishedAt: true,
          difficultyLevel: true,
          title: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Tutorial })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTutorial(
    @common.Param() params: TutorialWhereUniqueInput
  ): Promise<Tutorial | null> {
    try {
      return await this.service.deleteTutorial({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          content: true,
          publishedAt: true,
          difficultyLevel: true,
          title: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
