/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Tutorial } from "./Tutorial";
import { TutorialCountArgs } from "./TutorialCountArgs";
import { TutorialFindManyArgs } from "./TutorialFindManyArgs";
import { TutorialFindUniqueArgs } from "./TutorialFindUniqueArgs";
import { CreateTutorialArgs } from "./CreateTutorialArgs";
import { UpdateTutorialArgs } from "./UpdateTutorialArgs";
import { DeleteTutorialArgs } from "./DeleteTutorialArgs";
import { TutorialService } from "../tutorial.service";
@graphql.Resolver(() => Tutorial)
export class TutorialResolverBase {
  constructor(protected readonly service: TutorialService) {}

  async _tutorialsMeta(
    @graphql.Args() args: TutorialCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Tutorial])
  async tutorials(
    @graphql.Args() args: TutorialFindManyArgs
  ): Promise<Tutorial[]> {
    return this.service.tutorials(args);
  }

  @graphql.Query(() => Tutorial, { nullable: true })
  async tutorial(
    @graphql.Args() args: TutorialFindUniqueArgs
  ): Promise<Tutorial | null> {
    const result = await this.service.tutorial(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Tutorial)
  async createTutorial(
    @graphql.Args() args: CreateTutorialArgs
  ): Promise<Tutorial> {
    return await this.service.createTutorial({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Tutorial)
  async updateTutorial(
    @graphql.Args() args: UpdateTutorialArgs
  ): Promise<Tutorial | null> {
    try {
      return await this.service.updateTutorial({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Tutorial)
  async deleteTutorial(
    @graphql.Args() args: DeleteTutorialArgs
  ): Promise<Tutorial | null> {
    try {
      return await this.service.deleteTutorial(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
